<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context-4.0.xsd
    	http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    	http://www.springframework.org/schema/aop
    	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
    	http://www.springframework.org/schema/websocket
    	http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd">

	<context:annotation-config />
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:rabbitmq.properties</value>
				<value>classpath:messages.properties</value>
				<value>classpath:system.properties</value>
			</list>
		</property>
	</bean>

	<context:component-scan
		base-package="
		com.sanlogic.sannet.server.rpc.configure
		com.sanlogic.sannet.server.rpc.listeners
		com.sanlogic.sannet.server.dao.impl
		com.sanlogic.sannet.server.service.impl
		com.sanlogic.sannet.server.rpc.worker.impl
		" />
		
		<!-- 
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters">
			<list>
				<bean id="formHttpMessageConverter"
					class="org.springframework.http.converter.FormHttpMessageConverter">
					<property name="charset" value="UTF-8">
					</property>
				</bean>
				<bean id="stringHttpMessageConverter"
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
	        <list>
	            <value>text/html;charset=UTF-8</value>
	            <value>application/json;charset=UTF-8</value>
	        </list>
	    </property>
		<!--json关于时间格式的转换-->
		<property name="objectMapper">
			<ref bean="objectMapper" />
			<!-- <bean class="com.fasterxml.jackson.databind.ObjectMapper">
				<property name="dateFormat">
					<bean class="java.text.SimpleDateFormat">
						<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
					</bean>
				</property>
			</bean> -->
		</property>
	</bean>
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
		<property name="dateFormat">
			<bean class="java.text.SimpleDateFormat">
				<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
			</bean>
		</property>
	</bean>


	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}">
		</property>
		<property name="url"
			value="${jdbc.url}?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8">
		</property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.sanlogic.sannet.server.po</value>
			</list>
		</property>

		<property name="annotatedPackages">
			<list>
				<value>com.sanlogic.sannet.server.po</value>
			</list>
		</property>
	</bean>
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="fetchSize" value="20" />
	</bean>
	<!-- 事务管理器配置, Hibernate单数据源事务 -->
    <bean id="defaultTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <!-- 使用annotation定义事务 -->  
    <tx:advice id="txAdvice" transaction-manager="defaultTransactionManager">
	    <tx:attributes>
		      <!-- 事务执行方式
		        REQUIRED：指定当前方法必需在事务环境中运行，
		        如果当前有事务环境就加入当前正在执行的事务环境，
		        如果当前没有事务，就新建一个事务。
		        这是默认值。 
		       -->
		      <tx:method name="create*" propagation="REQUIRED" />
		      <tx:method name="save*" propagation="REQUIRED" />
		      <tx:method name="add" propagation="REQUIRED" read-only="false"/>
		      <tx:method name="add*" propagation="REQUIRED" read-only="false"/>
		      <tx:method name="update*" propagation="REQUIRED" />
		      <tx:method name="remove*" propagation="REQUIRED" />
		      <tx:method name="del*" propagation="REQUIRED" />
		      <tx:method name="import*" propagation="REQUIRED" />
		      <tx:method name="finish" propagation="REQUIRED" />
		      <tx:method name="cancel" propagation="REQUIRED" />
		      <tx:method name="change*" propagation="REQUIRED" />
		       <tx:method name="register" propagation="REQUIRED" />
		       <tx:method name="getBridgeByVlan" propagation="REQUIRED" />
		       <tx:method name="lazyCreateVlan" propagation="REQUIRED" />
		       <tx:method name="temporaryIp" propagation="REQUIRED" />
		       <tx:method name="deliverIps" propagation="REQUIRED" /> 
		       <tx:method name="hostToRelieveIp" propagation="REQUIRED" />  
		       <tx:method name="hostToUpdateIp" propagation="REQUIRED" /> 
		       <tx:method name="migrateIp" propagation="REQUIRED" /> 
		       <tx:method name="migrateIps" propagation="REQUIRED" /> 
		       
		    
		       <tx:method name="batchBindingIpMac" propagation="NOT_SUPPORTED" />  
		      <!-- 
			        指定当前方法以非事务方式执行操作，如果当前存在事务，就把当前事务挂起，等我以非事务的状态运行完，再继续原来的事务。 
			        查询定义即可
		        read-only="true"  表示只读
		       -->
		      <tx:method name="*" propagation="NOT_SUPPORTED" read-only="true" />
	    </tx:attributes>
	</tx:advice>
	  <!-- 定义切面，在 * tdxy.*.service.*ServiceImpl.*(..) 中执行有关的hibernate session的事务操作 -->
	  <aop:config>
	    <aop:pointcut id="serviceOperation" expression="execution(* com.sanlogic.sannet.server.service.impl.*ServiceImpl.*(..))" />
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	  </aop:config>
	  
	  
	<!--验证码 -->
	<!-- <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha"> 
		<property name="config"> <bean class="com.google.code.kaptcha.util.Config"> 
		<constructor-arg type="java.util.Properties"> <value> kaptcha.border=yes 
		kaptcha.textproducer.char.string=0123456789 kaptcha.textproducer.font.names=Arial 
		kaptcha.session.key=code kaptcha.textproducer.char.length=4 kaptcha.image.width=240 
		kaptcha.image.height=60 kaptcha.textproducer.font.color=black </value> </constructor-arg> 
		</bean> </property> </bean> -->
	
	<!-- web层数据验证 -->
	<import resource="classpath:/spring-validator.xml" />	
	
</beans>
